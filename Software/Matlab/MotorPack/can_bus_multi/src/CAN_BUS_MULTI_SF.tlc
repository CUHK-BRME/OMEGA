%% File : CAN_BUS_MULTI_SF.tlc
%% Created : Mon Mar 29 11:57:11 2021
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "CAN_BUS_MULTI_SF.cpp".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  CAN_BUS_MULTI_SF "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs


    extern void CAN_BUS_MULTI_SF_Start_wrapper(void **pW,
			const uint8_T *device_num, const int_T p_width0,
			const uint8_T *can_port, const int_T p_width1);

    extern void CAN_BUS_MULTI_SF_Outputs_wrapper(const real32_T *m1_cmd,
			const real32_T *m2_cmd,
			const real32_T *m3_cmd,
			const real32_T *m4_cmd,
			real32_T *m1_out,
			real32_T *m2_out,
			real32_T *m3_out,
			real32_T *m4_out,
			uint8_T *err_no,
			uint8_T *device_err,
			void **pW,
			const uint8_T *device_num, const int_T p_width0,
			const uint8_T *can_port, const int_T p_width1);

    extern void CAN_BUS_MULTI_SF_Terminate_wrapper(void **pW,
			const uint8_T *device_num, const int_T p_width0,
			const uint8_T *can_port, const int_T p_width1);

  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  CAN_BUS_MULTI_SF_Start_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  CAN_BUS_MULTI_SF_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %%
%endfunction

%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  CAN_BUS_MULTI_SF_Terminate_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
%endfunction

%% [EOF] CAN_BUS_MULTI_SF.tlc

